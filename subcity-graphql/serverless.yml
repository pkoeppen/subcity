service: subcity-graphql

plugins:
  #- serverless-webpack
  - serverless-offline
  #- serverless-s3-local

# package:
#   individually: true
#   include:
#     - "../env.yml"

custom:
  serverless-offline:
    port: 3001
  s3:
    host: 0.0.0.0
    port: 8000
    directory: /tmp
    cors: ./cors.xml
  webpack:
    webpackConfig: ./webpack.config.js

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  stage: ${opt:stage, "dev"}
  environment: ${file(../env.yml):${opt:stage, "dev"}}

  iamRoleStatements:
    - Effect: Allow
      Action:
        # - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:*"
    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:s3:::subcity-bucket-in-${self:provider.stage}/*"
    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:s3:::subcity-bucket-out-${self:provider.stage}/*"

functions:

  ### Authentication

  auth:
    handler: auth/handler.auth

  ### GQL Public

  public:
    handler: handler.public
    events:
      - http:
          path: /api/public
          method: post
          cors: true

  ### GQL Private

  private:
    handler: handler.private
    events:
      - http:
          path: /api/private
          method: post
          authorizer: auth
          cors: true

resources:
  Resources:

    ### S3 Bucket IN

    ImageBucketIn:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_IN}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    ### S3 Bucket OUT

    ImageBucketOut:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_OUT}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
              MaxAge: 3000

    ### ChannelsTable

    ChannelsTable:
      Type: AWS::DynamoDB::Table
      Properties:

        AttributeDefinitions:
        - AttributeName: channel_id
          AttributeType: S

        KeySchema:
        - AttributeName: channel_id
          KeyType: HASH

        BillingMode: PAY_PER_REQUEST
        TableName: "${self:provider.environment.DYNAMODB_TABLE_CHANNELS}"

    ### InvitationsTable

    InvitationsTable:
      Type: AWS::DynamoDB::Table
      Properties:

        AttributeDefinitions:
        - AttributeName: channel_id
          AttributeType: S
        - AttributeName: syndicate_id
          AttributeType: S

        KeySchema:

          # Default - Query invitations by channel_id.

        - AttributeName: channel_id
          KeyType: HASH
        - AttributeName: syndicate_id
          KeyType: RANGE

        GlobalSecondaryIndexes:

          # GSI to query invitations by syndicate_id.

        - IndexName: "${self:provider.environment.DYNAMODB_TABLE_INVITATIONS}-GSI"
          KeySchema:
          - AttributeName: syndicate_id
            KeyType: HASH
          - AttributeName: channel_id
            KeyType: RANGE
          Projection:
            ProjectionType: ALL

        BillingMode: PAY_PER_REQUEST
        TableName: "${self:provider.environment.DYNAMODB_TABLE_INVITATIONS}"

    ### MembershipsTable

    MembershipsTable:
      Type: AWS::DynamoDB::Table
      Properties:

        AttributeDefinitions:
        - AttributeName: channel_id
          AttributeType: S
        - AttributeName: syndicate_id
          AttributeType: S

        KeySchema:

          # Default - Query memberships by channel_id.

        - AttributeName: channel_id
          KeyType: HASH
        - AttributeName: syndicate_id
          KeyType: RANGE

        GlobalSecondaryIndexes:

          # GSI to query memberships by syndicate_id.

        - IndexName: "${self:provider.environment.DYNAMODB_TABLE_MEMBERSHIPS}-GSI"
          KeySchema:
          - AttributeName: syndicate_id
            KeyType: HASH
          - AttributeName: channel_id
            KeyType: RANGE
          Projection:
            ProjectionType: ALL

        BillingMode: PAY_PER_REQUEST
        TableName: "${self:provider.environment.DYNAMODB_TABLE_MEMBERSHIPS}"

    ### MessagesTable

    # MessagesTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:

    #     AttributeDefinitions:
    #     - AttributeName: sender
    #       AttributeType: S
    #     - AttributeName: receiver
    #       AttributeType: S
    #     - AttributeName: time_created
    #       AttributeType: N
    #     # - AttributeName: content
    #     #   AttributeType: S
    #     # - AttributeName: type
    #     #   AttributeType: S

    #     KeySchema:
    #     - AttributeName: sender
    #       KeyType: HASH
    #     - AttributeName: time_created
    #       KeyType: RANGE

    #     GlobalSecondaryIndexes:

    #       # GSI to query messages by receiver_id.

    #     - IndexName: "${self:provider.environment.DYNAMODB_TABLE_MESSAGES}-GSI"
    #       KeySchema:
    #       - AttributeName: receiver
    #         KeyType: HASH
    #       - AttributeName: sender
    #         KeyType: RANGE
    #       Projection:
    #         NonKeyAttributes:
    #         - time_created
    #         # - content
    #         # - type
    #         ProjectionType: INCLUDE

    #     TableName: "${self:provider.environment.DYNAMODB_TABLE_MESSAGES}"

    ### PaymentsTable

    PaymentsTable:
      Type: AWS::DynamoDB::Table
      Properties:

        AttributeDefinitions:
        - AttributeName: channel_id
          AttributeType: S
        - AttributeName: syndicate_id
          AttributeType: S
        - AttributeName: time_created
          AttributeType: N

        KeySchema:
        - AttributeName: channel_id
          KeyType: HASH
        - AttributeName: time_created
          KeyType: RANGE

        GlobalSecondaryIndexes:

          # GSI to query payments by syndicate_id (if it exists).

        - IndexName: "${self:provider.environment.DYNAMODB_TABLE_PAYMENTS}-GSI"
          KeySchema:
          - AttributeName: syndicate_id
            KeyType: HASH
          - AttributeName: time_created
            KeyType: RANGE
          Projection:
            ProjectionType: ALL

        BillingMode: PAY_PER_REQUEST
        TableName: "${self:provider.environment.DYNAMODB_TABLE_PAYMENTS}"

    ### ProposalsTable

    ProposalsTable:
      Type: AWS::DynamoDB::Table
      Properties:

        AttributeDefinitions:
        - AttributeName: syndicate_id
          AttributeType: S
        - AttributeName: time_created
          AttributeType: N

        KeySchema:
        - AttributeName: syndicate_id
          KeyType: HASH
        - AttributeName: time_created
          KeyType: RANGE

        BillingMode: PAY_PER_REQUEST
        TableName: "${self:provider.environment.DYNAMODB_TABLE_PROPOSALS}"

    ### ReleasesTable

    ReleasesTable:
      Type: AWS::DynamoDB::Table
      Properties:

        AttributeDefinitions:
        - AttributeName: channel_id
          AttributeType: S
        - AttributeName: slug
          AttributeType: S
        - AttributeName: time_created
          AttributeType: N

        KeySchema:
        - AttributeName: channel_id
          KeyType: HASH
        - AttributeName: time_created
          KeyType: RANGE

        LocalSecondaryIndexes:

          # LSI to query releases by slug.

        - IndexName: "${self:provider.environment.DYNAMODB_TABLE_RELEASES}-LSI"
          KeySchema:
          - AttributeName: channel_id
            KeyType: HASH
          - AttributeName: slug
            KeyType: RANGE
          Projection:
            ProjectionType: ALL

        BillingMode: PAY_PER_REQUEST
        TableName: "${self:provider.environment.DYNAMODB_TABLE_RELEASES}"

    ### SlugsTable

    SlugsTable:
      Type: AWS::DynamoDB::Table
      Properties:

        AttributeDefinitions:
        - AttributeName: slug
          AttributeType: S
        - AttributeName: channel_id
          AttributeType: S
        - AttributeName: syndicate_id
          AttributeType: S

        KeySchema:
        - AttributeName: slug
          KeyType: HASH

        GlobalSecondaryIndexes:

          # GSI to query a slug by channel_id.

        - IndexName: "${self:provider.environment.DYNAMODB_TABLE_SLUGS}-GSI-1"
          KeySchema:
          - AttributeName: channel_id
            KeyType: HASH
          Projection:
            ProjectionType: ALL

          # GSI to query a slug by syndicate_id.

        - IndexName: "${self:provider.environment.DYNAMODB_TABLE_SLUGS}-GSI-2"
          KeySchema:
          - AttributeName: syndicate_id
            KeyType: HASH
          Projection:
            ProjectionType: ALL

        BillingMode: PAY_PER_REQUEST
        TableName: "${self:provider.environment.DYNAMODB_TABLE_SLUGS}"

    ### SubscribersTable

    SubscribersTable:
      Type: AWS::DynamoDB::Table
      Properties:

        AttributeDefinitions:
        - AttributeName: subscriber_id
          AttributeType: S

        KeySchema:
        - AttributeName: subscriber_id
          KeyType: HASH

        BillingMode: PAY_PER_REQUEST
        TableName: "${self:provider.environment.DYNAMODB_TABLE_SUBSCRIBERS}"

    ### SubscriptionsTable

    SubscriptionsTable:
      Type: AWS::DynamoDB::Table
      Properties:

        AttributeDefinitions:
        - AttributeName: subscriber_id
          AttributeType: S
        - AttributeName: subscription_id
          AttributeType: S
        - AttributeName: channel_id
          AttributeType: S
        - AttributeName: syndicate_id
          AttributeType: S

        KeySchema:
        - AttributeName: subscriber_id
          KeyType: HASH
        - AttributeName: subscription_id
          KeyType: RANGE

        GlobalSecondaryIndexes:

          # GSI to query subscriptions by channel_id.

        - IndexName: "${self:provider.environment.DYNAMODB_TABLE_SUBSCRIPTIONS}-GSI-1"
          KeySchema:
          - AttributeName: channel_id
            KeyType: HASH
          - AttributeName: subscriber_id
            KeyType: RANGE
          Projection:
            ProjectionType: ALL

          # GSI to query subscriptions by syndicate_id.

        - IndexName: "${self:provider.environment.DYNAMODB_TABLE_SUBSCRIPTIONS}-GSI-2"
          KeySchema:
          - AttributeName: syndicate_id
            KeyType: HASH
          - AttributeName: subscriber_id
            KeyType: RANGE
          Projection:
            ProjectionType: ALL

        BillingMode: PAY_PER_REQUEST
        TableName: "${self:provider.environment.DYNAMODB_TABLE_SUBSCRIPTIONS}"

    ### SyndicatesTable

    SyndicatesTable:
      Type: AWS::DynamoDB::Table
      Properties:

        AttributeDefinitions:
        - AttributeName: syndicate_id
          AttributeType: S

        KeySchema:
        - AttributeName: syndicate_id
          KeyType: HASH

        BillingMode: PAY_PER_REQUEST
        TableName: "${self:provider.environment.DYNAMODB_TABLE_SYNDICATES}"

    ### TokensTable

    TokensTable:
      Type: AWS::DynamoDB::Table
      Properties:

        AttributeDefinitions:
        - AttributeName: token_id
          AttributeType: S

        KeySchema:
        - AttributeName: token_id
          KeyType: HASH

        BillingMode: PAY_PER_REQUEST
        TableName: "${self:provider.environment.DYNAMODB_TABLE_TOKENS}"

    # This response is needed for custom authorizer failures CORS support.

    GatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"

    AuthFailureGatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"